stack: go

platform:
  - i386
  - amd64


install:
  - choco install nsis -pre
  - choco install pandoc


environment:
  BUILD_DIR_EXE: build-work\windows\exe
  BUILD_DIR_ZIP: build-work\windows\zip
  GO111MODULE: on
  LDFLAGS: -ldflags "-X github.com/j-keck/lsleases/pkg/daemon.version=%VERSION% -X main.version=%VERSION%"


before_build:
  - if %platform% == i386 set GOARCH=386
  - if %platform% == amd64 set GOARCH=amd64
  - go version
  - go env

build_script:
  - ps: $env:VERSION = $(git describe --tags --always)

  - cmd: |
      go build %LDFLAGS% github.com/j-keck/lsleases/cmd/lsleases
      go build %LDFLAGS% github.com/j-keck/lsleases/cmd/lsleasesd

  - cmd: |
      pandoc -s -o manual-windows.html docs/manual-windows.org

  - cmd: |
      chdir %APPVEYOR_BUILD_FOLDER%
      mkdir %BUILD_DIR_EXE%
      copy lsleases.exe %BUILD_DIR_EXE%
      copy lsleasesd.exe %BUILD_DIR_EXE%
      copy LICENSE %BUILD_DIR_EXE%
      copy manual-windows.html %BUILD_DIR_EXE%
      copy build\windows\installer.nsi %BUILD_DIR_EXE%
      copy build\windows\amd64/nssm.exe %BUILD_DIR_EXE%
      copy build\windows\*.bat %BUILD_DIR_EXE%
      chdir %BUILD_DIR_EXE%
      makensis installer.nsi

  - cmd: |
      chdir %APPVEYOR_BUILD_FOLDER%
      mkdir %BUILD_DIR_ZIP%\lsleases
      copy lsleases.exe %BUILD_DIR_ZIP%\lsleases
      copy LICENSE %BUILD_DIR_ZIP%\lsleases
      copy manual-windows.html %BUILD_DIR_ZIP%\lsleases
      copy build\windows\capture-leases.bat %BUILD_DIR_ZIP%\lsleases
      chdir %BUILD_DIR_ZIP%
      7z.exe a lsleases-%VERSION%-%PLATFORM%-windows-standalone.zip .\lsleases


artifacts:
  - path: $(BUILD_DIR_EXE)\lsleases-$(VERSION)-*
  - path: $(BUILD_DIR_ZIP)\lsleases-$(VERSION)-*


#deploy:
#  description: 'Release'
#  provider: GitHub
#  auth_token:
#    secure: qqn10ztf8r42lkErydQEdSw0Vho2EmB0/8PjVuBjvN+r4QLbg6OLgWAVm7aeykiF
#  artifact: installer
#  force_update: true