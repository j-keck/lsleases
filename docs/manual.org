#+TITLE: lsleases Manual

* Intro

*lsleases* helps you to find dynamic assigned ip addresses
from any devices in your local network.

This package contains two executables:


** lsleases

 *lsleases* displays captured ip addresses.

 See the *lsleaes* [[lsleases.org][man page]] for more information.


** lsleasesd

 *lsleasesd* captures broadcast 'DHCP request' datagrams.

 See the *lsleasesd* [[lsleasesd.org][man page]] for more information.


* Source

** Build from source

You can clone this repository and build the binaries yourself, or use
the *go* command to download and build it.

When you build this project yourself, it's mandatory to set the
necessary capabilities or use *sudo* when you start *lsleasesd*.

You can set the necessary capabilities per ~sudo setcap cap_net_raw,cap_net_bind_services=+ep lsleasesd~.

*** Build from checkout

In the checkout directory execute:

#+BEGIN_SRC sh :eval no
go build github.com/j-keck/lsleases/cmd/lsleases
go build github.com/j-keck/lsleases/cmd/lsleasesd
#+END_SRC

*** Build and fetch per *go* command

#+BEGIN_SRC sh :eval no
go get -u github.com/j-keck/lsleases/cmd/lsleases
go get -u github.com/j-keck/lsleases/cmd/lsleasesd
#+END_SRC

This installs *lsleases* (the client) and *lsleasesd* (the server) under ~$GOPATH/bin~.

** Project structure

 #+BEGIN_EXAMPLE
├── build               : build scripts
├── cmd
│   ├── lsleases        : client programm
│   └── lsleasesd       : daemon programm
├── docs                : documentation
├── examples            : go library examples
└── pkg                 : modules
    ├── config          : configuration
    ├── cscom           : client server communication
    ├── daemon          : daemon (lsleasesd)
    ├── leases          : leases, history, cleanup
    ├── sniffer         : network sniffer
    └── webui           : web app
 #+END_EXAMPLE


* Firewall

*lsleases* opens a network socket to captures broadcast 'DHCP request' datagrams.

If you have a firewall which blocks all incomming traffic, *lsleases* can't capture any packages.

To temporary allow incomming traffic on port 67 (DHCP) execute the following command.
#+BEGIN_SRC shell :eval no
sudo iptables -I INPUT -p udp --dport 67 -j ACCEPT
#+END_SRC


TOOD: describe how make the firewall rule persistent.
